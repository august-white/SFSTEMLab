// Only one of the models has a relation
// relation has id of other model and of itself (fields and references, respectively)

// One-to-One 
// A record from exactly one model and how it relates to exactly one record from another model
model UserProfile {
    id int 
    bio string
    userId int
    user User @relation(fields: [userId], references: [id])
}

model User {
    id int
    email string
    profile UserProfile? //optional 
}

// One-to-Many - one record from one model relates to multiple from another model
// @relation... of array type 

model Post {
    id int
    title string
    authorid
    author User @relation(fields: [authorId], references: [id])
}

model User {
    id int
    email string
    posts Post[] // a user has many posts aka 1 user has many relations with Posts 
}

// Many-to-Many  - multiple records from one model to multiple records from another model, often achieved using a join table
model User {
    id int
    email string 
    roles Role[] @relation("UserRole") // many-to-many relation with Role
}

model Role {
    id int 
    name String 
    user User[] @relation("UserRole") // many-to-may relation with User
}

UserRoles is a 'relation name'. It is used to identify a relationship between two models (to name the relationship)


// self-realtion (referencing the same model)
- a model relates to iteself. useful for heirarchical data like trees or different organization structures

model Category {
    id int 
    name String 
    parentId Int? 
    parent Category? @relation("Subcategories", fields: [parendId], references: [id])
    children Category[] @relation("Subcategories")
}